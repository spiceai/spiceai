name: TPC-H Benchmark

on:
  pull_request:
    branches:
      - trunk

  workflow_dispatch:

jobs:
  build:
    # if: false
    name: Build ${{ matrix.name }} binaries
    runs-on: ${{ matrix.runner }}
    env:
      GOVER: 1.22
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch_go }}

    strategy:
      matrix:
        include:
          - name: Linux x64
            runner: rust
            target_os: linux
            target_arch: x86_64
            target_arch_go: amd64
          # - name: macOS aarch64 (Apple Silicon)
          #   runner: macos-14
          #   target_os: darwin
          #   target_arch: aarch64
          #   target_arch_go: arm64
          # - name: macOS x64 (Intel)
          #   runner: macos-12
          #   target_os: darwin
          #   target_arch: x86_64
          #   target_arch_go: amd64
          # - name: Windows x64
          #   runner: rust-windows-x64
          #   target_os: windows
          #   target_arch: x86_64
          #   target_arch_go: amd64

    steps:
      - uses: actions/checkout@v3

      - name: Set REL_VERSION from version.txt
        run: python3 ./.github/scripts/get_release_version.py

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVER }}

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          os: ${{ matrix.target_os }}

      - name: Restore build cache (macOS)
        if: matrix.target_os == 'darwin'
        run: |
          mkdir -p target
          if [ -d /Users/spiceai/build/target ]; then
            rsync -av /Users/spiceai/build/target/ target/
          fi

      - name: Restore build cache (Linux)
        if: matrix.target_os == 'linux'
        run: |
          mkdir -p target
          if [ -d /home/spiceai/build/target ]; then
            rsync -av /home/spiceai/build/target/ target/
          fi

      - name: Restore build cache (Windows)
        if: matrix.target_os == 'windows'
        run: |
          mkdir -p target
          if (Test-Path C:/spiceai/build/target) {
            Copy-Item -Recurse -Force C:/spiceai/build/target/* target/
          }

      - name: Build spiced
        run: make -C bin/spiced

      - name: Update build cache (macOS)
        if: matrix.target_os == 'darwin'
        run: |
          if [ -d /Users/spiceai/build/target ]; then
            rsync -av target/ /Users/spiceai/build/target/
          fi

      - name: Update build cache (Linux)
        if: matrix.target_os == 'linux'
        run: |
          if [ -d /home/spiceai/build/target ]; then
            rsync -av target/ /home/spiceai/build/target/
          fi

      - name: Update build cache (Windows)
        if: matrix.target_os == 'windows'
        run: |
          if (Test-Path C:/spiceai/build/target) {
            Copy-Item -Recurse -Force target/* C:/spiceai/build/target
          }

      - name: Build spice
        run: make -C bin/spice

      - name: make spiced executable
        if: matrix.target_os != 'windows'
        run: |
          mv target/release/spiced spiced
          chmod +x spiced

      - name: make spice executable
        if: matrix.target_os != 'windows'
        run: |
          mv target/release/spice spice
          chmod +x spice

      - name: Save spice artifact
        uses: actions/upload-artifact@v4
        if: matrix.target_os != 'windows'
        with:
          name: build_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: |
            spice
            spiced

  tpc_h_benchmark:
    name: "Run TPC-H Benchmark on ${{ matrix.target_os }}-${{ matrix.target_arch }}"
    runs-on: ${{ matrix.runner }}
    needs: build

    strategy:
      fail-fast: false
      matrix:
        scale-factor: [0.1]
        include:
          - name: Linux x64
            runner: ubuntu-latest
            target_os: linux
            target_arch: x86_64
            target_arch_go: amd64
          # - name: macOS aarch64 (Apple Silicon)
          #   runner: macos-14
          #   target_os: darwin
          #   target_arch: aarch64
          #   target_arch_go: arm64
          # - name: macOS x64 (Intel)
          #   runner: macos-12
          #   target_os: darwin
          #   target_arch: x86_64
          #   target_arch_go: amd64
          # - name: Windows x64
          #   runner: rust-windows-x64
          #   target_os: windows
          #   target_arch: x86_64
          #   target_arch_go: amd64

    steps:
      - uses: actions/checkout@v3

      - name: download artifacts - build_${{ matrix.target_os }}_${{ matrix.target_arch }}
        uses: actions/download-artifact@v4
        with:
          name: build_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ./build

      - name: Install spice
        run: |
          chmod +x ./build/spice
          chmod +x ./build/spiced
          mkdir -p "$HOME/.spice/bin"
          mv ./build/spice "$HOME/.spice/bin"
          mv ./build/spiced "$HOME/.spice/bin"
          echo "$HOME/.spice/bin" >> $GITHUB_PATH

      - name: Check spice version
        run: spice version

      - name: Install PostgreSQL (Linux)
        if: matrix.target_os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql
          sudo service postgresql start
          sleep 5
          sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='postgres'" | grep -q 1 || sudo -u postgres createuser -s postgres
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
          sudo -u postgres createdb tpch

      - name: Install PostgreSQL (MacOS)
        if: matrix.target_os == 'darwin'
        run: |
          brew install postgresql
          brew services start postgresql
          sleep 5
          createuser -s postgres
          psql -d postgres -c "ALTER USER postgres PASSWORD 'postgres';"
          createdb tpch

      - name: Wait for PostgreSQL to start
        run: sleep 10

      - name: Check PostgreSQL
        env:
          PGPASSWORD: postgres
        run: psql -h localhost -U postgres -c 'SELECT version();'

      - name: Generate TPC-H Benchmark data
        working-directory: ./test/tpch
        run: |
          make tpch-init
          DBGEN_SCALE=${{ matrix.scale-factor }} make tpch-gen

      - name: Load TPC-H Benchmark data to PostgreSQL
        working-directory: ./test/tpch
        env:
          PGPASSWORD: postgres
          PGHOST: localhost
          PGUSER: postgres
        run: |
          make pg-init
          make pg-load

      # - name: Run TPC-H queries (PostgreSQL)
      #   working-directory: ./test/tpch
      #   env:
      #     PGPASSWORD: postgres
      #     PGHOST: localhost
      #     PGUSER: postgres
      #   run: |
      #     make tpch-run-pq


      - name: Start spice runtime
        working-directory: ./test/tpch/tpch-spicepod
        run: |
          spice run &
            # time to initialize added datasets
          sleep 10

      - name: Wait for Spice runtime healthy
        timeout-minutes: 1
        run: |
          while [[ "$(curl -s http://localhost:3000/health)" != "ok" ]]; do sleep 1; done

      - name: Show loaded datasets
        working-directory: test_app
        run: |
          response=$(curl http://localhost:3000/v1/datasets)
          echo $response | jq

      - name: Run TPC-H queries (Spice)
        run: |
          # show tables
          # Run 'show tables;' command and check for errors
          show_tables_output=$(echo "show tables;" | spice sql)
          echo "$show_tables_output"
          # Read the tpch_queries.sql file and split on ';' to execute each query separately
          while IFS= read -r query; do
            # Trim leading and trailing whitespace
            trimmed_query=$(echo "$query" | xargs)
            # Skip empty queries that may result from splitting
            if [[ -z "$trimmed_query" ]]; then
              continue
            fi
            echo "Executing query: $trimmed_query"
            sql_output=$(echo "$trimmed_query" | spice sql)
            echo "$sql_output"
            # Check for errors in the output
            if [[ $sql_output == *"error"* ]] || [[ $sql_output == *"not found"* ]]; then
              echo "Unexpected response from spice sql, failed to perform query: $sql_output"
              exit 1
            fi
          done < <(cat test/tpch/tpch_queries.sql | tr ';' '\n')
