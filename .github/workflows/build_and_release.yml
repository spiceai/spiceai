name: build_and_release

on:
  push:
    branches:
      - trunk
      - release-*
    tags:
      - v*

  workflow_dispatch:

jobs:
  build_dashboard:
    name: Build dashboard
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Build and copy dashboard
        run: make
        working-directory: dashboard

      - name: Test dashboard
        run: yarn test
        working-directory: dashboard

      - name: Upload dashboard artifact
        uses: actions/upload-artifact@v2
        with:
          name: dashboard_build
          path: dashboard/build

  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    needs: build_dashboard
    runs-on: ${{ matrix.os }}
    env:
      GOVER: 1.18
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}

    strategy:
      matrix:
        os: [self-hosted, ubuntu-latest, macOS-latest]
        target_arch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: macOS-latest
            target_os: darwin
          - os: self-hosted
            target_os: darwin
        exclude:
          - os: ubuntu-latest
            target_arch: arm64
          - os: macOS-latest
            target_arch: arm64
          - os: self-hosted
            target_arch: amd64

    steps:
      - uses: actions/checkout@v2

      - name: Set REL_VERSION from version.txt
        run: python ./.github/scripts/get_release_version.py

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GOVER }}

      - name: Download dashboard
        uses: actions/download-artifact@v2
        with:
          name: dashboard_build
          path: pkg/dashboard/build

      - name: Build spiced
        run: make
        working-directory: cmd/spiced

      - name: Build spice
        run: make
        working-directory: cmd/spice

      - name: Run go test
        if: matrix.target_os != 'windows'
        run: go test -v ./... -shuffle=on

      - name: tar binary
        if: matrix.target_os != 'windows'
        run: |
          mv cmd/spiced/spiced spiced
          chmod +x spiced
          tar cf spiced_${{ matrix.target_os }}_${{ matrix.target_arch }}.tar.gz spiced

      - name: Print version
        if: matrix.target_os != 'windows'
        run: ./spiced version

      - uses: actions/upload-artifact@v2
        if: matrix.target_os != 'windows'
        with:
          name: spiced_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: spiced_${{ matrix.target_os }}_${{ matrix.target_arch }}.tar.gz

      - uses: actions/upload-artifact@v2
        if: matrix.target_os == 'windows'
        with:
          name: spiced_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: cmd/spiced/spiced.exe

      - name: tar binary
        if: matrix.target_os != 'windows'
        working-directory: cmd/spice
        run: |
          chmod +x spice
          tar cf spice_${{ matrix.target_os }}_${{ matrix.target_arch }}.tar.gz spice

      - name: Print version
        if: matrix.target_os != 'windows'
        working-directory: cmd/spice
        run: ./spice version

      - uses: actions/upload-artifact@v2
        if: matrix.target_os != 'windows'
        with:
          name: spice_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: cmd/spice/spice_${{ matrix.target_os }}_${{ matrix.target_arch }}.tar.gz

      - uses: actions/upload-artifact@v2
        if: matrix.target_os == 'windows'
        with:
          name: spice_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: cmd/spice/spice.exe

  publish:
    name: Publish ${{ matrix.target_os }}-${{ matrix.target_arch }} binaries
    needs: build
    if: startswith(github.ref, 'refs/tags/v') && github.event_name != 'pull_request'
    env:
      ARTIFACT_DIR: ./release

    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        target_arch: [amd64, arm64]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: ubuntu-latest
            target_arch: arm64

    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Set REL_VERSION from version.txt
        run: python ./.github/scripts/get_release_version.py

      - name: download artifacts - spice_${{ matrix.target_os }}_${{ matrix.target_arch }}
        uses: actions/download-artifact@master
        with:
          name: spice_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: download artifacts - spiced_${{ matrix.target_os }}_${{ matrix.target_arch }}
        uses: actions/download-artifact@master
        with:
          name: spiced_${{ matrix.target_os }}_${{ matrix.target_arch }}
          path: ${{ env.ARTIFACT_DIR }}

      - name: lists artifacts
        run: ls -l ${{ env.ARTIFACT_DIR }}

      - name: publish ${{ matrix.target_os }}/${{ matrix.target_arch }} binaries to github
        run: |
          # Parse repository to get owner and repo names
          OWNER_NAME="${GITHUB_REPOSITORY%%/*}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          export GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          # Get the list of files
          RELEASE_ARTIFACT=(${ARTIFACT_DIR}/*)
          # Delete existing release artifact
          python ./.github/scripts/github_release.py delete \
            --owner $OWNER_NAME --repo $REPO_NAME \
            --tag "v${{ env.REL_VERSION }}" \
            ${RELEASE_ARTIFACT[*]}
          if [ "$LATEST_RELEASE" = "true" ]; then
            export RELEASE_BODY=`cat ./docs/release_notes/v${{ env.REL_VERSION }}.md`
          else
            export RELEASE_BODY="This is the release candidate ${{ env.REL_VERSION }}"
          fi
          echo "Uploading Spice.ai Binaries to GitHub Release"
          python ./.github/scripts/github_release.py upload \
            --owner $OWNER_NAME --repo $REPO_NAME \
            --tag "v${{ env.REL_VERSION }}" \
            --release-name "Spice.ai v${{ env.REL_VERSION }}" \
            --body "${RELEASE_BODY}" \
            --prerelease "$PRE_RELEASE" \
            ${RELEASE_ARTIFACT[*]}
