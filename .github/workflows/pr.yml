---
name: pr

on:
  pull_request:
    branches:
      - trunk
      - release-*
      - feature-*
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.ref_name == 'trunk' && github.sha || 'any-sha' }}
  cancel-in-progress: true

env:
  IGNORED_PATHS: '(^./docs/|^README.md$|^version.txt$|^acknowledgements.md$)'

jobs:

  # `pr` is a required check for pull requests. Therefore we cannot skip the workflow via 
  # `on.pull_requests.paths-ignore`. Instead, we conditionally run the jobs (which report 
  # a sucess when skipped).
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      relevant_changes: ${{ steps.check_changes.outputs.relevant_changes }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for relevant changes
        id: check_changes
        run: |
          if git diff --name-only origin/${{ github.base_ref }} ${{ github.sha }} | grep -vE "${{ env.IGNORED_PATHS }}"; then
            echo "Relevant changes detected."
            echo "::set-output name=relevant_changes::true"
          else
            echo "No relevant changes detected."
            echo "::set-output name=relevant_changes::false"
          fi

  lint:
    name: Run Go & Rust Linters
    runs-on: rust
    env:
      GOVER: 1.22.0
    needs: check_changes
    if: needs.check_changes.outputs.relevant_changes == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVER }}
          cache: false

      - name: Install golangci-lint
        run: |
          if ! command -v golangci-lint &> /dev/null ; then
            curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin
          fi

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          os: 'linux'
      
      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - run: make lint

      - name: Check if Cargo.lock is updated
        run: |
          if git diff --exit-code Cargo.lock; then
            echo "Cargo.lock is up to date"
          else
            echo "Update Cargo.lock"
            exit 1
          fi

  build:
    name: Build Go & Rust
    runs-on: rust
    env:
      GOVER: 1.22.0
    needs: check_changes
    if: needs.check_changes.outputs.relevant_changes == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVER }}
          cache: false

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          os: 'linux'

      - run: make ci test

  build-docker:
    name: Build Docker Image
    runs-on: rust
    needs: check_changes
    if: needs.check_changes.outputs.relevant_changes == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: false
          build-args: |
            CARGO_FEATURES=odbc
          tags: |
            ghcr.io/spiceai/spiceai-rust:ci
