name: E2E Test CI

on:
  push:
    branches:
      - trunk
      - release-*

  pull_request:
    branches:
      - trunk

  workflow_dispatch:

concurrency:
  # Allow only one workflow per any non-trunk branch.
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.ref_name == 'trunk' && github.sha || 'any-sha' }}
  cancel-in-progress: true

jobs:
  setup-matrix:
    name: Setup strategy matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup-matrix.outputs.result }}

    steps:
      - name: Set up matrix
        uses: actions/github-script@v7
        id: setup-matrix
        with:
          script: |
            const matrix = [
              {
                name: "Linux x64",
                runner: "ubuntu-latest",
                target_os: "linux",
                target_arch: "x86_64",
                target_arch_go: "amd64"
              }, {
                name: "macOS aarch64 (Apple Silicon)",
                runner: "macos-14",
                target_os: "darwin",
                target_arch: "aarch64",
                target_arch_go: "arm64"
              }, {
                name: "macOS x64 (Intel)",
                runner: "macos-12",
                target_os: "darwin",
                target_arch: "x86_64",
                target_arch_go: "amd64"
              }
            ];

            return context.eventName === 'pull_request' ? matrix.slice(0, 1) : matrix;

  build:
    name: Build ${{ matrix.target.name }} binaries
    runs-on: ${{ matrix.target.runner }}
    needs: setup-matrix
    env:
      GOVER: 1.22.0
      GOOS: ${{ matrix.target.target_os }}
      GOARCH: ${{ matrix.target.target_arch_go }}

    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3

      - name: Set REL_VERSION from version.txt
        run: python3 ./.github/scripts/get_release_version.py

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOVER }}

      - run: rustup toolchain install stable --profile minimal

      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.ref == 'refs/heads/trunk' }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build spiced
        run: make -C bin/spiced

      - name: Update build cache (macOS)
        if: matrix.target.target_os == 'darwin'
        run: |
          if [ -d /Users/spiceai/build/target ]; then
            rsync -av target/ /Users/spiceai/build/target/
          fi

      - name: Update build cache (Linux)
        if: matrix.target.target_os == 'linux'
        run: |
          if [ -d /home/spiceai/build/target ]; then
            rsync -av target/ /home/spiceai/build/target/
          fi

      - name: Update build cache (Windows)
        if: matrix.target.target_os == 'windows'
        run: |
          if (Test-Path C:/spiceai/build/target) {
            Copy-Item -Recurse -Force target/* C:/spiceai/build/target
          }

      - name: Build spice
        run: make -C bin/spice

      - name: make spiced executable
        if: matrix.target.target_os != 'windows'
        run: |
          mv target/release/spiced spiced
          chmod +x spiced

      - name: make spice executable
        if: matrix.target.target_os != 'windows'
        run: |
          mv target/release/spice spice
          chmod +x spice

      - name: Save spice artifact
        uses: actions/upload-artifact@v4
        if: matrix.target.target_os != 'windows'
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: |
            spice
            spiced

  test_quickstart_dremio:
    name: 'Test Dremio quickstart (${{ matrix.target.target_os }}-${{ matrix.target.target_arch }})'
    runs-on: ${{ matrix.target.runner }}
    # run quickstart with external service dependency only on manual trigger
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    needs:
      - build
      - setup-matrix

    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: download artifacts - build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
        uses: actions/download-artifact@v4
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: ./build

      - name: Install spice
        uses: ./.github/actions/install-spice
        with:
          build-dir: './build'

      - name: Init spice app
        run: |
          spice init test_app

      - name: Connect Dremio
        working-directory: test_app
        run: |
          spice login dremio -u demo -p demo1234

      - name: Start spice runtime
        working-directory: test_app
        run: |
          spice run &> spice.log &
          # time to initialize added dataset
          sleep 10

      - name: Wait for Spice runtime healthy
        working-directory: test_app
        timeout-minutes: 1
        run: |
          while [[ "$(curl -s http://localhost:3000/health)" != "ok" ]]; do sleep 1; done

      - name: Add spiceai/quickstart
        working-directory: test_app
        run: |
          spice add spiceai/quickstart
          cat spicepod.yaml
          # time to initialize added dataset
          sleep 10

      - name: Check datasets
        working-directory: test_app
        run: |
          response=$(curl http://localhost:3000/v1/datasets)
          echo $response | jq
          length=$(echo $response | jq 'if type=="array" then length else empty end')
          if [[ $length -ne 1 ]]; then
            echo "Unexpected response: $response, expected 1 dataset but received $length"
            exit 1
          fi

      - name: Check taxi_trips table exists
        working-directory: test_app
        run: |
          response=$(curl -X POST \
            -H "Content-Type: text/plain" \
            -d "show tables;" \
            http://localhost:3000/v1/sql
          )
          echo $response | jq
          table_exists=$(echo $response | jq '[.[] | select(.table_name == "taxi_trips")]' | jq 'length')
          if [[ $table_exists -eq 0 ]]; then
            echo "Unexpected response: table 'taxi_trips' does not exist."
            exit 1
          fi

      - name: Run Flight SQL query
        working-directory: test_app
        run: |
          sql_output=$(echo "select * from taxi_trips limit 10;" | spice sql)
          echo "$sql_output"
          if [[ $sql_output == *"error"* ]] || [[ $sql_output == *"not found"* ]]; then
            echo "Unexpected response from spice sql, failed to perform test query: $sql_output"
            exit 1
          fi

      - name: Stop spice and check logs
        working-directory: test_app
        if: always()
        run: |
          killall spice
          cat spice.log

  test_quickstart_spiceai:
    name: 'Test Spice.ai quickstart (${{ matrix.target.target_os }}-${{ matrix.target.target_arch }})'
    runs-on: ${{ matrix.target.runner }}
    # run quickstart with external service dependency only on manual trigger
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
    needs:
      - build
      - setup-matrix

    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    
    steps:
      - uses: actions/checkout@v4

      - name: download artifacts - build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
        uses: actions/download-artifact@v4
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: ./build

      - name: Install spice
        uses: ./.github/actions/install-spice
        with:
          build-dir: './build'

      - name: Init spice app
        run: |
          spice init test_app

      - name: Spice dataset configure
        working-directory: test_app
        run: |
          echo -e "eth_recent_blocks\neth recent logs\nspice.ai/eth.recent_blocks\ny" | spice dataset configure
          # configure env secret store
          echo -e "secrets:\n  store: env\n" >> spicepod.yaml
          cat spicepod.yaml

      - name: Start spice runtime
        env:
          SPICE_SECRET_SPICEAI_KEY: ${{ secrets.SPICE_SECRET_SPICEAI_KEY }}
        working-directory: test_app
        run: |
          spice run &> spice.log &
          # time to initialize added dataset
          sleep 10

      - name: Wait for Spice runtime healthy
        working-directory: test_app
        timeout-minutes: 1
        run: |
          while [[ "$(curl -s http://localhost:3000/health)" != "ok" ]]; do sleep 1; done

      - name: Check datasets
        working-directory: test_app
        run: |
          response=$(curl http://localhost:3000/v1/datasets)
          echo $response | jq
          length=$(echo $response | jq 'if type=="array" then length else empty end')
          if [[ $length -ne 1 ]]; then
            echo "Unexpected response: $response, expected 1 dataset but received $length"
            exit 1
          fi

      - name: Check eth_recent_blocks table exists
        working-directory: test_app
        run: |
          response=$(curl -X POST \
            -H "Content-Type: text/plain" \
            -d "show tables;" \
            http://localhost:3000/v1/sql
          )
          echo $response | jq
          table_exists=$(echo $response | jq '[.[] | select(.table_name == "eth_recent_blocks")]' | jq 'length')
          if [[ $table_exists -eq 0 ]]; then
            echo "Unexpected response: table 'eth_recent_blocks' does not exist."
            exit 1
          fi

      - name: Run Flight SQL query
        working-directory: test_app
        run: |
          sql_output=$(echo "select * from eth_recent_blocks limit 10;" | spice sql)
          echo "$sql_output"
          if [[ $sql_output == *"error"* ]] || [[ $sql_output == *"not found"* ]]; then
            echo "Unexpected response from spice sql, failed to perform test query: $sql_output"
            exit 1
          fi

      - name: Stop spice and check logs
        working-directory: test_app
        if: always()
        run: |
          killall spice
          cat spice.log

  test_quickstart_data_postgres:
    name: 'Test PostgreSQL quickstart (${{ matrix.target.target_os }}-${{ matrix.target.target_arch }})'
    runs-on: ${{ matrix.target.runner }}
    needs:
      - build
      - setup-matrix

    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Install PostgreSQL (Linux)
        if: matrix.target.target_os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql
          sudo service postgresql start
          sleep 5
          sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='postgres'" | grep -q 1 || sudo -u postgres createuser -s postgres
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
          sudo -u postgres createdb testdb

      - name: Install PostgreSQL (MacOS)
        if: matrix.target.target_os == 'darwin'
        run: |
          brew install postgresql
          brew services start postgresql
          sleep 5
          createuser -s postgres
          psql -d postgres -c "ALTER USER postgres PASSWORD 'postgres';"
          createdb testdb

      - name: Wait for PostgreSQL to start
        run: sleep 10

      - name: Check PostgreSQL
        env:
          PGPASSWORD: postgres
        run: psql -h localhost -U postgres -c 'SELECT version();'

      - name: Prepare PostgreSQL dataset
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d testdb < test/scripts/setup-data-postgresql.sql
          psql -h localhost -U postgres -d testdb -c 'SELECT * FROM test_postgresql_table;'

      - name: download artifacts - build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
        uses: actions/download-artifact@v4
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: ./build

      - name: Install spice
        uses: ./.github/actions/install-spice
        with:
          build-dir: './build'

      - name: Init spice app
        run: |
          spice init test_app

      - name: Spice dataset configure
        working-directory: test_app
        run: |
          echo -e "test_postgresql_table\neth recent blocks\npostgres:test_postgresql_table\ny" | spice dataset configure
          # configure pg credentials
          echo -e "params:\n  pg_host: localhost\n  pg_port: 5432\n  pg_db: testdb\n  pg_user: postgres\n  pg_pass_key: password\n  pg_sslmode: disable" >> ./datasets/test_postgresql_table/dataset.yaml
          # configure env secret store
          echo -e "secrets:\n  store: env\n" >> spicepod.yaml
          cat spicepod.yaml

      - name: Start spice runtime
        env:
          SPICE_SECRET_POSTGRES_PASSWORD: postgres
        working-directory: test_app
        run: |
          spice run &> spice.log &
          # time to initialize added dataset
          sleep 10

      - name: Wait for Spice runtime healthy
        working-directory: test_app
        timeout-minutes: 1
        run: |
          while [[ "$(curl -s http://localhost:3000/health)" != "ok" ]]; do sleep 1; done

      - name: Check datasets
        working-directory: test_app
        run: |
          response=$(curl http://localhost:3000/v1/datasets)
          echo $response | jq
          length=$(echo $response | jq 'if type=="array" then length else empty end')
          if [[ $length -ne 1 ]]; then
            echo "Unexpected response: $response, expected 1 dataset but received $length"
            exit 1
          fi

      - name: Check test_postgresql_table table exists
        working-directory: test_app
        run: |
          response=$(curl -X POST \
            -H "Content-Type: text/plain" \
            -d "show tables;" \
            http://localhost:3000/v1/sql
          )
          echo $response | jq
          table_exists=$(echo $response | jq '[.[] | select(.table_name == "test_postgresql_table")]' | jq 'length')
          if [[ $table_exists -eq 0 ]]; then
            echo "Unexpected response: table 'test_postgresql_table' does not exist."
            exit 1
          fi

      - name: Run Flight SQL query
        working-directory: test_app
        run: |
          sql_output=$(echo "select * from test_postgresql_table limit 10;" | spice sql)
          echo "$sql_output"
          if [[ $sql_output == *"error"* ]] || [[ $sql_output == *"not found"* ]]; then
            echo "Unexpected response from spice sql, failed to perform test query: $sql_output"
            exit 1
          fi

      - name: Stop spice and check logs
        working-directory: test_app
        if: always()
        run: |
          killall spice
          cat spice.log

  test_quickstart_data_mysql:
    name: 'Test MySQL quickstart (${{ matrix.target.target_os }}-${{ matrix.target.target_arch }})'
    runs-on: ${{ matrix.target.runner }}
    needs:
      - build
      - setup-matrix

    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Install MySQL (Linux)
        if: matrix.target.target_os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-server
          sudo systemctl start mysql.service
          sleep 5
          mysql -uroot -proot -e "CREATE USER test_user@localhost IDENTIFIED BY 'password';"
          mysql -uroot -proot -e "GRANT ALL PRIVILEGES ON testdb.* TO 'test_user'@'localhost'; FLUSH PRIVILEGES;"
          mysql -e "CREATE DATABASE IF NOT EXISTS testdb;" -utest_user -ppassword

      - name: Install MysqlSQL (MacOS)
        if: matrix.target.target_os == 'darwin'
        run: |
          brew install mysql
          brew services start mysql
          sleep 5
          mysql -e "CREATE USER test_user@localhost IDENTIFIED BY 'password';"
          mysql -e "GRANT ALL PRIVILEGES ON testdb.* TO 'test_user'@'localhost'; FLUSH PRIVILEGES;"
          mysql -e "CREATE DATABASE IF NOT EXISTS testdb;" -utest_user -ppassword

      - name: Wait for MySQL to start
        run: sleep 10

      - name: Check MySQL
        run: echo 'SELECT VERSION();' | mysql -h localhost -utest_user -ppassword

      - name: Prepare MysqlSQL dataset
        run: |

          mysql -h localhost -utest_user -ppassword testdb < test/scripts/setup-data-mysql.sql
          mysql -h localhost -utest_user -ppassword testdb -e "SELECT * FROM test_mysql_table;"

      - name: download artifacts - build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
        uses: actions/download-artifact@v4
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: ./build

      - name: Install spice
        uses: ./.github/actions/install-spice
        with:
          build-dir: './build'

      - name: Init spice app
        run: |
          spice init test_app

      - name: Spice dataset configure
        working-directory: test_app
        run: |
          echo -e "test_mysql_table\neth recent blocks\nmysql:test_mysql_table\ny" | spice dataset configure
          # configure mysql credentials
          echo -e "params:\n  mysql_host: localhost\n  mysql_tcp_port: 3306\n  mysql_db: testdb\n  mysql_user: test_user\n  mysql_pass_key: password\n  mysql_sslmode: disabled" >> ./datasets/test_mysql_table/dataset.yaml
          # configure env secret store
          echo -e "secrets:\n  store: env\n" >> spicepod.yaml
          cat spicepod.yaml

      - name: Start spice runtime
        env:
          SPICE_SECRET_MYSQL_PASSWORD: password
        working-directory: test_app
        run: |
          spice run &> spice.log &
          # time to initialize added dataset
          sleep 10

      - name: Wait for Spice runtime healthy
        working-directory: test_app
        timeout-minutes: 1
        run: |
          while [[ "$(curl -s http://localhost:3000/health)" != "ok" ]]; do sleep 1; done

      - name: Check datasets
        working-directory: test_app
        run: |
          response=$(curl http://localhost:3000/v1/datasets)
          echo $response | jq
          length=$(echo $response | jq 'if type=="array" then length else empty end')
          if [[ $length -ne 1 ]]; then
            echo "Unexpected response: $response, expected 1 dataset but received $length"
            exit 1
          fi

      - name: Check test_mysql_table table exists
        working-directory: test_app
        run: |
          response=$(curl -X POST \
            -H "Content-Type: text/plain" \
            -d "show tables;" \
            http://localhost:3000/v1/sql
          )
          echo $response | jq
          table_exists=$(echo $response | jq '[.[] | select(.table_name == "test_mysql_table")]' | jq 'length')
          if [[ $table_exists -eq 0 ]]; then
            echo "Unexpected response: table 'test_mysql_table' does not exist."
            exit 1
          fi

      - name: Run Flight SQL query
        working-directory: test_app
        run: |
          sql_output=$(echo "select * from test_mysql_table limit 10;" | spice sql)
          echo "$sql_output"
          if [[ $sql_output == *"error"* ]] || [[ $sql_output == *"not found"* ]]; then
            echo "Unexpected response from spice sql, failed to perform test query: $sql_output"
            exit 1
          fi

      - name: Stop spice and check logs
        working-directory: test_app
        if: always()
        run: |
          killall spice
          cat spice.log

  test_quickstart_clickhouse:
    name: 'Test Clickhouse quickstart (${{ matrix.target.target_os }}-${{ matrix.target.target_arch }})'
    runs-on: ${{ matrix.target.runner }}
    needs:
      - build
      - setup-matrix

    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Clickhouse
        if: matrix.target.target_os == 'linux'
        run: |
          curl https://clickhouse.com/ | sh
          sudo ./clickhouse install
          sudo -u clickhouse /usr/bin/clickhouse-server --config=/etc/clickhouse-server/config.xml --daemon  -- --tcp_port=9001
          sleep 5
          clickhouse client --port 9001 -udefault --query="CREATE USER test_user IDENTIFIED BY 'password';"
          clickhouse client --port 9001 -udefault --query="GRANT ALL PRIVILEGES ON testdb.* TO 'test_user';"
          clickhouse client --port 9001 -utest_user --password password --query="CREATE DATABASE IF NOT EXISTS testdb;"

      - name: Install Clickhouse
        if: matrix.target.target_os == 'darwin'
        run: |
          curl https://clickhouse.com/ | sh
          sudo ./clickhouse install
          sudo clickhouse server --config=/etc/clickhouse-server/config.xml --daemon  -- --tcp_port=9001
          sleep 5
          clickhouse client --port 9001 -udefault --query="CREATE USER test_user IDENTIFIED BY 'password';"
          clickhouse client --port 9001 -udefault --query="GRANT ALL PRIVILEGES ON testdb.* TO 'test_user';"
          clickhouse client --port 9001 -utest_user --password password --query="CREATE DATABASE IF NOT EXISTS testdb;"

      - name: Wait for Clickhouse to start
        run: sleep 10

      - name: Check Clickhouse
        run: clickhouse client --port 9001 -utest_user --password password --query="SELECT version();"

      - name: Prepare Clickhouse dataset
        run: |
          clickhouse client --port 9001 -m -n -utest_user --password password --database=testdb < test/scripts/setup-data-clickhouse.sql
          clickhouse client --port 9001 -utest_user --password password --database=testdb --query="SELECT * FROM test_clickhouse_table;"

      - name: download artifacts - build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
        uses: actions/download-artifact@v4
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: ./build

      - name: Install spice
        uses: ./.github/actions/install-spice
        with:
          build-dir: './build'

      - name: Init spice app
        run: |
          spice init test_app

      - name: Spice dataset configure
        working-directory: test_app
        run: |
          echo -e "test_clickhouse_table\neth recent blocks\nclickhouse:test_clickhouse_table\ny" | spice dataset configure
          # configure clickhouse credentials
          echo -e "params:\n  clickhouse_host: localhost\n  clickhouse_tcp_port: 9001\n  clickhouse_db: testdb\n  clickhouse_user: test_user\n  clickhouse_pass_key: password\n  clickhouse_secure: false\n" >> ./datasets/test_clickhouse_table/dataset.yaml
          # configure env secret store
          echo -e "secrets:\n  store: env\n" >> spicepod.yaml
          cat spicepod.yaml

      - name: Start spice runtime
        env:
          SPICE_SECRET_CLICKHOUSE_PASSWORD: password
        working-directory: test_app
        run: |
          spice run &> spice.log &
          # time to initialize added dataset
          sleep 10

      - name: Wait for Spice runtime healthy
        working-directory: test_app
        timeout-minutes: 1
        run: |
          while [[ "$(curl -s http://localhost:3000/health)" != "ok" ]]; do sleep 1; done

      - name: Check datasets
        working-directory: test_app
        run: |
          response=$(curl http://localhost:3000/v1/datasets)
          echo $response | jq
          length=$(echo $response | jq 'if type=="array" then length else empty end')
          if [[ $length -ne 1 ]]; then
            echo "Unexpected response: $response, expected 1 dataset but received $length"
            exit 1
          fi

      - name: Check test_clickhouse_table table exists
        working-directory: test_app
        run: |
          response=$(curl -X POST \
            -H "Content-Type: text/plain" \
            -d "show tables;" \
            http://localhost:3000/v1/sql
          )
          echo $response | jq
          table_exists=$(echo $response | jq '[.[] | select(.table_name == "test_clickhouse_table")]' | jq 'length')
          if [[ $table_exists -eq 0 ]]; then
            echo "Unexpected response: table 'test_clickhouse_table' does not exist."
            exit 1
          fi

      - name: Run Flight SQL query
        working-directory: test_app
        run: |
          sql_output=$(echo "select * from test_clickhouse_table limit 10;" | spice sql)
          echo "$sql_output"
          if [[ $sql_output == *"error"* ]] || [[ $sql_output == *"not found"* ]]; then
            echo "Unexpected response from spice sql, failed to perform test query: $sql_output"
            exit 1
          fi

      - name: Stop spice and check logs
        working-directory: test_app
        if: always()
        run: |
          killall spice
          cat spice.log

  test_local_acceleration:
    name: 'Test acceleration on ${{ matrix.target.name }} using ${{ matrix.acceleration.engine }}'
    runs-on: ${{ matrix.target.runner }}
    needs:
      - build
      - setup-matrix

    strategy:
      fail-fast: false
      matrix:
        acceleration: [
            { engine: arrow, mode: memory },
            { engine: duckdb, mode: memory },
            { engine: duckdb, mode: file },
            { engine: sqlite, mode: memory },
            { engine: sqlite, mode: file },
            # { engine: postgres},
          ]
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Install PostgreSQL (Linux)
        if: matrix.target.target_os == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql
          sudo service postgresql start
          sleep 5
          sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='postgres'" | grep -q 1 || sudo -u postgres createuser -s postgres
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD 'postgres';"
          sudo -u postgres createdb testdb

      - name: Install PostgreSQL (MacOS)
        if: matrix.target.target_os == 'darwin'
        run: |
          brew install postgresql
          brew services start postgresql
          sleep 5
          createuser -s postgres
          psql -d postgres -c "ALTER USER postgres PASSWORD 'postgres';"
          createdb testdb

      - name: Wait for PostgreSQL to start
        run: sleep 10

      - name: Check PostgreSQL
        env:
          PGPASSWORD: postgres
        run: psql -h localhost -U postgres -c 'SELECT version();'

      - name: Prepare PostgreSQL dataset
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d testdb -c 'CREATE TABLE eth_recent_blocks (id SERIAL PRIMARY KEY, block_number INTEGER, block_hash TEXT);'
          psql -h localhost -U postgres -d testdb -c "INSERT INTO eth_recent_blocks (block_number, block_hash) VALUES (1, '0x1234');"
          psql -h localhost -U postgres -d testdb -c "INSERT INTO eth_recent_blocks (block_number, block_hash) VALUES (2, '0x5678');"
          psql -h localhost -U postgres -d testdb -c "INSERT INTO eth_recent_blocks (block_number, block_hash) VALUES (3, '0x9abc');"
          psql -h localhost -U postgres -d testdb -c 'SELECT * FROM eth_recent_blocks;'

      - name: download artifacts - build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
        uses: actions/download-artifact@v4
        with:
          name: build_${{ matrix.target.target_os }}_${{ matrix.target.target_arch }}
          path: ./build

      - name: Install spice
        uses: ./.github/actions/install-spice
        with:
          build-dir: './build'

      - name: Init spice app
        run: |
          spice init test_app

      - name: Spice dataset configure
        working-directory: test_app
        run: |
          ENGINE=$(echo '${{ matrix.acceleration.engine }}')
          MODE=$(echo '${{ matrix.acceleration.mode }}')

          echo "datasets:" >> spicepod.yaml
          echo "  - name: eth_recent_blocks" >> spicepod.yaml
          echo "    from: postgres:eth_recent_blocks" >> spicepod.yaml
          echo "    acceleration:" >> spicepod.yaml
          echo "      enabled: true" >> spicepod.yaml
          echo "      engine: $ENGINE" >> spicepod.yaml
          if [[ -n "$MODE" ]]; then
            echo "      mode: $MODE" >> spicepod.yaml
          fi
          echo "      refresh_sql: SELECT * FROM eth_recent_blocks LIMIT 1" >> spicepod.yaml
          echo "    params:" >> spicepod.yaml
          echo "      pg_host: localhost" >> spicepod.yaml
          echo "      pg_port: '5432'" >> spicepod.yaml
          echo "      pg_db: testdb" >> spicepod.yaml
          echo "      pg_user: postgres" >> spicepod.yaml
          echo "      pg_pass_key: password" >> spicepod.yaml
          echo "      pg_sslmode: disable" >> spicepod.yaml
          # configure env secret store
          echo -e "secrets:\n  store: env\n" >> spicepod.yaml
          cat spicepod.yaml

      - name: Start spice runtime
        env:
          SPICE_SECRET_POSTGRES_PASSWORD: postgres
        working-directory: test_app
        run: |
          spice run &> spice.log &
          # time to initialize added dataset
          sleep 10

      - name: Wait for Spice runtime healthy
        working-directory: test_app
        timeout-minutes: 1
        run: |
          while [[ "$(curl -s http://localhost:3000/health)" != "ok" ]]; do sleep 1; done

      - name: Check datasets
        working-directory: test_app
        run: |
          response=$(curl http://localhost:3000/v1/datasets)
          echo $response | jq
          length=$(echo $response | jq 'if type=="array" then length else empty end')
          if [[ $length -ne 1 ]]; then
            echo "Unexpected response: $response, expected 1 dataset but received $length"
            exit 1
          fi
      - name: Manually refresh dataset
        working-directory: test_app
        run: |
          output=$(spice refresh eth_recent_blocks 2>&1)
          echo "$output"
          if [[ $output == *"Dataset refresh triggered"* ]]; then
            # time to refresh dataset
            sleep 5
          else
            echo "Failed to trigger dataset refresh."
            exit 1
          fi

      - name: Check eth_recent_blocks table exists
        working-directory: test_app
        run: |
          response=$(curl -X POST \
            -H "Content-Type: text/plain" \
            -d "show tables;" \
            http://localhost:3000/v1/sql
          )
          echo $response | jq
          table_exists=$(echo $response | jq '[.[] | select(.table_name == "eth_recent_blocks")]' | jq 'length')
          if [[ $table_exists -eq 0 ]]; then
            echo "Unexpected response: table 'taxi_trips' does not exist."
            exit 1
          fi

      - name: Check Flight SQL query
        working-directory: test_app
        run: |
          sql_output=$(echo "select * from eth_recent_blocks limit 10;" | spice sql)
          echo "$sql_output"
          if [[ $sql_output == *"error"* ]] || [[ $sql_output == *"not found"* ]]; then
            echo "Unexpected response from spice sql, failed to perform test query: $sql_output"
            exit 1
          fi
          if ![[ $sql_output == *"1/1 rows displayed"* ]]; then
            echo "Query did not return the expected number of rows defined by `refresh_sql` statement."
            exit 1
          fi

      - name: Stop spice and check logs
        working-directory: test_app
        if: always()
        run: |
          killall spice
          cat spice.log
