name: spiced_docker

on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      rel_version: ${{ steps.set_version.outputs.rel_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Set REL_VERSION from version.txt
        id: set_version
        run: |
          python3 ./.github/scripts/get_release_version.py
          echo "rel_version=${{ env.REL_VERSION }}" >> $GITHUB_OUTPUT

  build-amd64:
    needs: setup
    runs-on: spiceai-runners
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          # Enable docker driver for layer caching
          driver-opts: |
            image=moby/buildkit:latest
      
      - name: Build AMD64 slim image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          outputs: type=oci,dest=/tmp/image-amd64-slim.tar
          cache-from: type=gha,scope=build-amd64
          cache-to: type=gha,scope=build-amd64,mode=max
          build-args: |
            REL_VERSION=${{ needs.setup.outputs.rel_version }}
            CARGO_FEATURES=release

      - name: Build AMD64 full image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          outputs: type=oci,dest=/tmp/image-amd64-full.tar
          cache-from: type=gha,scope=build-amd64
          cache-to: type=gha,scope=build-amd64,mode=max
          build-args: |
            REL_VERSION=${{ needs.setup.outputs.rel_version }}
            CARGO_FEATURES=release,odbc

      - name: Build AMD64 models image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          outputs: type=oci,dest=/tmp/image-amd64-models.tar
          cache-from: type=gha,scope=build-amd64
          cache-to: type=gha,scope=build-amd64,mode=max
          build-args: |
            REL_VERSION=${{ needs.setup.outputs.rel_version }}
            CARGO_FEATURES=release,models

      - name: Upload AMD64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: images-amd64
          path: /tmp/image-amd64-*.tar

  build-arm64:
    needs: setup
    runs-on: hosted-linux-arm-runner-16-cores
    steps:
      - uses: actions/checkout@v4

      - name: Install docker
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg lsb-release
          sudo mkdir -m 0755 -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/$(lsb_release -i | awk '{ print tolower($3) }') $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Start Docker service
        run: |
          sudo systemctl start docker
          sudo systemctl status docker

      - name: chown /var/run/docker.sock to current user
        run: |
          sudo chown $USER /var/run/docker.sock

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      - name: Build ARM64 slim image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/arm64
          outputs: type=oci,dest=/tmp/image-arm64-slim.tar
          cache-from: type=gha,scope=build-arm64
          cache-to: type=gha,scope=build-arm64,mode=max
          build-args: |
            REL_VERSION=${{ needs.setup.outputs.rel_version }}
            CARGO_FEATURES=release

      - name: Build ARM64 full image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/arm64
          outputs: type=oci,dest=/tmp/image-arm64-full.tar
          cache-from: type=gha,scope=build-arm64
          cache-to: type=gha,scope=build-arm64,mode=max
          build-args: |
            REL_VERSION=${{ needs.setup.outputs.rel_version }}
            CARGO_FEATURES=release,odbc

      - name: Build ARM64 models image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/arm64
          outputs: type=oci,dest=/tmp/image-arm64-models.tar
          cache-from: type=gha,scope=build-arm64
          cache-to: type=gha,scope=build-arm64,mode=max
          build-args: |
            REL_VERSION=${{ needs.setup.outputs.rel_version }}
            CARGO_FEATURES=release,models

      - name: Upload ARM64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: images-arm64
          path: /tmp/image-arm64-*.tar

  publish:
    needs: [setup, build-amd64, build-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: /tmp
          pattern: images-*

      - name: Verify artifacts
        run: |
          ls -l /tmp
          ls -l /tmp/images-amd64
          ls -l /tmp/images-arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Package Registry
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Import images and create manifests
        run: |
          variants=("slim" "full" "models")
          for variant in "${variants[@]}"; do
            # Set suffix based on variant
            suffix=""
            if [ "$variant" != "full" ]; then
              suffix="-${variant}"
            fi
            
            # Load both architecture images
            echo "Loading AMD64 image"
            docker load -i /tmp/images-amd64/image-amd64-${variant}.tar
            echo "Loading ARM64 image"
            docker load -i /tmp/images-arm64/image-arm64-${variant}.tar
            
            if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
              # Push to GitHub Container Registry
              docker buildx imagetools create --push \
                -t ghcr.io/spiceai/spiceai:${{ needs.setup.outputs.rel_version }}${suffix} \
                -t ghcr.io/spiceai/spiceai:latest${suffix} \
                /tmp/images-amd64/image-amd64-${variant}.tar \
                /tmp/images-arm64/image-arm64-${variant}.tar
              
              # Push to DockerHub
              docker buildx imagetools create --push \
                -t spiceai/spiceai:${{ needs.setup.outputs.rel_version }}${suffix} \
                -t spiceai/spiceai:latest${suffix} \
                /tmp/images-amd64/image-amd64-${variant}.tar \
                /tmp/images-arm64/image-arm64-${variant}.tar
              
              echo "Verifying GHCR image:"
              docker buildx imagetools inspect ghcr.io/spiceai/spiceai:${{ needs.setup.outputs.rel_version }}${suffix}
              
              echo "Verifying DockerHub image:"
              docker buildx imagetools inspect spiceai/spiceai:${{ needs.setup.outputs.rel_version }}${suffix}
            else
              echo "Skipping push for non-tag build"
              echo "Creating local manifest for testing:"
              docker buildx imagetools create \
                -t spiceai/spiceai:test${suffix} \
                /tmp/images-amd64/image-amd64-${variant}.tar \
                /tmp/images-arm64/image-arm64-${variant}.tar
              
              docker buildx imagetools inspect spiceai/spiceai:test${suffix}
            fi
          done
