([]*state.State) (len=5) {
  (*state.State)({
    Time: (time.Time) 2021-01-07 22:10:00 +0000 UTC,
    TimeSentToAIEngine: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
    origin: (string) (len=13) "bitmex.btcusd",
    identifierNames: ([]string) <nil>,
    measurementNames: ([]string) (len=1) {
      (string) (len=11) "measure.low"
    },
    categoryNames: ([]string) <nil>,
    columnMap: (map[string]int) (len=3) {
      (string) (len=11) "measure.low": (int) 1,
      (string) (len=4) "tags": (int) 2,
      (string) (len=4) "time": (int) 0
    },
    tags: ([]string) <nil>,
    tagMap: (map[string]bool) {
    },
    record: (*array.simpleRecord)(record:
  schema:
  fields: 3
    - time: type=int64
    - measure.low: type=float64
    - tags: type=list<item: utf8, nullable>
  rows: 5
  col[0][time]: [1605312000 1605313800 1605315600 1605317400 1605319200]
  col[1][measure.low]: [16240 16248.6 16210.99 16200.01 16175.62]
  col[2][tags]: [["elon_tweet" "market_open" "bought_1" "tag_2"] ["market_close" "local_tag_1" "local_tag_2"] ["local_tag_1" "local_tag_2"] ["use" "spice" "ai" "for" "all" "your" "intelligent" "time" "series" "app" "needs!" "local_tag_1"] ["local_tag_2"]]
),
    recordsMutex: (sync.RWMutex) {
      w: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      writerSem: (uint32) 0,
      readerSem: (uint32) 0,
      readerCount: (int32) 0,
      readerWait: (int32) 0
    }
  }),
  (*state.State)({
    Time: (time.Time) 2021-01-07 22:10:00 +0000 UTC,
    TimeSentToAIEngine: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
    origin: (string) (len=15) "bitthumb.btcusd",
    identifierNames: ([]string) <nil>,
    measurementNames: ([]string) (len=1) {
      (string) (len=12) "measure.high"
    },
    categoryNames: ([]string) <nil>,
    columnMap: (map[string]int) (len=3) {
      (string) (len=12) "measure.high": (int) 1,
      (string) (len=4) "tags": (int) 2,
      (string) (len=4) "time": (int) 0
    },
    tags: ([]string) <nil>,
    tagMap: (map[string]bool) {
    },
    record: (*array.simpleRecord)(record:
  schema:
  fields: 3
    - time: type=int64
    - measure.high: type=float64
    - tags: type=list<item: utf8, nullable>
  rows: 5
  col[0][time]: [1605312000 1605313800 1605315600 1605317400 1605319200]
  col[1][measure.high]: [16339.6 16305 16303.88 16246.92 16234]
  col[2][tags]: [["elon_tweet" "market_open" "bought_1" "tag_2"] ["market_close" "local_tag_1" "local_tag_2"] ["local_tag_1" "local_tag_2"] ["use" "spice" "ai" "for" "all" "your" "intelligent" "time" "series" "app" "needs!" "local_tag_1"] ["local_tag_2"]]
),
    recordsMutex: (sync.RWMutex) {
      w: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      writerSem: (uint32) 0,
      readerSem: (uint32) 0,
      readerCount: (int32) 0,
      readerWait: (int32) 0
    }
  }),
  (*state.State)({
    Time: (time.Time) 2021-01-07 22:10:00 +0000 UTC,
    TimeSentToAIEngine: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
    origin: (string) (len=15) "coinbase.btcusd",
    identifierNames: ([]string) <nil>,
    measurementNames: ([]string) (len=1) {
      (string) (len=12) "measure.open"
    },
    categoryNames: ([]string) <nil>,
    columnMap: (map[string]int) (len=3) {
      (string) (len=12) "measure.open": (int) 1,
      (string) (len=4) "tags": (int) 2,
      (string) (len=4) "time": (int) 0
    },
    tags: ([]string) <nil>,
    tagMap: (map[string]bool) {
    },
    record: (*array.simpleRecord)(record:
  schema:
  fields: 3
    - time: type=int64
    - measure.open: type=float64
    - tags: type=list<item: utf8, nullable>
  rows: 5
  col[0][time]: [1605312000 1605313800 1605315600 1605317400 1605319200]
  col[1][measure.open]: [16339.56 16256.42 16303.88 16221.78 16214.26]
  col[2][tags]: [["elon_tweet" "market_open" "bought_1" "tag_2"] ["market_close" "local_tag_1" "local_tag_2"] ["local_tag_1" "local_tag_2"] ["use" "spice" "ai" "for" "all" "your" "intelligent" "time" "series" "app" "needs!" "local_tag_1"] ["local_tag_2"]]
),
    recordsMutex: (sync.RWMutex) {
      w: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      writerSem: (uint32) 0,
      readerSem: (uint32) 0,
      readerCount: (int32) 0,
      readerWait: (int32) 0
    }
  }),
  (*state.State)({
    Time: (time.Time) 2021-01-07 22:10:00 +0000 UTC,
    TimeSentToAIEngine: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
    origin: (string) (len=19) "coinbase_pro.btcusd",
    identifierNames: ([]string) <nil>,
    measurementNames: ([]string) (len=1) {
      (string) (len=13) "measure.close"
    },
    categoryNames: ([]string) <nil>,
    columnMap: (map[string]int) (len=3) {
      (string) (len=13) "measure.close": (int) 1,
      (string) (len=4) "tags": (int) 2,
      (string) (len=4) "time": (int) 0
    },
    tags: ([]string) <nil>,
    tagMap: (map[string]bool) {
    },
    record: (*array.simpleRecord)(record:
  schema:
  fields: 3
    - time: type=int64
    - measure.close: type=float64
    - tags: type=list<item: utf8, nullable>
  rows: 5
  col[0][time]: [1605312000 1605313800 1605315600 1605317400 1605319200]
  col[1][measure.close]: [16254.51 16305 16222.16 16214.15 16223.08]
  col[2][tags]: [["elon_tweet" "market_open" "bought_1" "tag_2"] ["market_close" "local_tag_1" "local_tag_2"] ["local_tag_1" "local_tag_2"] ["use" "spice" "ai" "for" "all" "your" "intelligent" "time" "series" "app" "needs!" "local_tag_1"] ["local_tag_2"]]
),
    recordsMutex: (sync.RWMutex) {
      w: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      writerSem: (uint32) 0,
      readerSem: (uint32) 0,
      readerCount: (int32) 0,
      readerWait: (int32) 0
    }
  }),
  (*state.State)({
    Time: (time.Time) 2021-01-07 22:10:00 +0000 UTC,
    TimeSentToAIEngine: (time.Time) 0001-01-01 00:00:00 +0000 UTC,
    origin: (string) (len=12) "local.btcusd",
    identifierNames: ([]string) <nil>,
    measurementNames: ([]string) (len=1) {
      (string) (len=14) "measure.volume"
    },
    categoryNames: ([]string) <nil>,
    columnMap: (map[string]int) (len=3) {
      (string) (len=14) "measure.volume": (int) 1,
      (string) (len=4) "tags": (int) 2,
      (string) (len=4) "time": (int) 0
    },
    tags: ([]string) <nil>,
    tagMap: (map[string]bool) {
    },
    record: (*array.simpleRecord)(record:
  schema:
  fields: 3
    - time: type=int64
    - measure.volume: type=float64
    - tags: type=list<item: utf8, nullable>
  rows: 5
  col[0][time]: [1605312000 1605313800 1605315600 1605317400 1605319200]
  col[1][measure.volume]: [274.42607 110.91971 231.64805 135.86161 164.32561]
  col[2][tags]: [["elon_tweet" "market_open" "bought_1" "tag_2"] ["market_close" "local_tag_1" "local_tag_2"] ["local_tag_1" "local_tag_2"] ["use" "spice" "ai" "for" "all" "your" "intelligent" "time" "series" "app" "needs!" "local_tag_1"] ["local_tag_2"]]
),
    recordsMutex: (sync.RWMutex) {
      w: (sync.Mutex) {
        state: (int32) 0,
        sema: (uint32) 0
      },
      writerSem: (uint32) 0,
      readerSem: (uint32) 0,
      readerCount: (int32) 0,
      readerWait: (int32) 0
    }
  })
}
